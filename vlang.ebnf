LBRACE              ::=  '{'
RBRACE              ::=  '}'
LBRACK              ::=  '['
HASH_LBRACK         ::=  '#['
RBRACK              ::=  ']'
RBRACK_EXP          ::=  ']!'
LPAREN              ::=  '('
RPAREN              ::=  ')'
COLON               ::=  ':'
SEMICOLON           ::=  ';'
COMMA               ::=  ','
EQ                  ::=  '=='
ASSIGN              ::=  '='
NOT_EQ              ::=  '!='
NOT                 ::=  '!'
QUESTION            ::=  '?'
PLUS_PLUS           ::=  '++'
PLUS_ASSIGN         ::=  '+='
PLUS                ::=  '+'
MINUS_MINUS         ::=  '--'
MINUS_ASSIGN        ::=  '-='
MINUS               ::=  '-'
COND_OR             ::=  '||'
BIT_OR_ASSIGN       ::=  '|='
BIT_CLEAR_ASSIGN    ::=  '&^='
BIT_CLEAR           ::=  '&^'
COND_AND            ::=  '&&'
BIT_AND_ASSIGN      ::=  '&='
BIT_AND             ::=  '&'
BIT_OR              ::=  '|'
SHIFT_LEFT_ASSIGN   ::=  '<<='
SHIFT_LEFT          ::=  '<<'
SEND_CHANNEL        ::=  '<-'
LESS_OR_EQUAL       ::=  '<='
LESS                ::=  '<'
BIT_XOR_ASSIGN      ::=  '^='
BIT_XOR             ::=  '^'
MUL_ASSIGN          ::=  '*='
MUL                 ::=  '*'
QUOTIENT_ASSIGN     ::=  '/='
QUOTIENT            ::=  '/'
REMAINDER_ASSIGN    ::=  '%='
REMAINDER           ::=  '%'
AT_LBRACK           ::=  '@['
AT                  ::=  '@'
SHIFT_RIGHT_ASSIGN  ::=  '>>='
UNSIGNED_SHIFT_RIGHT_ASSIGN  ::=  '>>>='
SHIFT_RIGHT         ::=  '>>'
UNSIGNED_SHIFT_RIGHT::=  '>>>'
GREATER_OR_EQUAL    ::=  '>='
GREATER             ::=  '>'
VAR_ASSIGN          ::=  ':='
TRIPLE_DOT          ::=  '...'
DOT                 ::=  '.'
SAFE_DOT            ::=  '?.'
RANGE               ::=  '..'
TILDA               ::=  '~'
SINGLE_QUOTE        ::=  "'"
DOUBLE_QUOTE        ::=  '"'
BACKTICK            ::=  '`'
DOLLAR              ::=  '$'
NOT_IN              ::=  '!in'
NOT_IS              ::=  '!is'
IF_COMPILE_TIME     ::=  '$if'
ELSE_COMPILE_TIME   ::=  '$else'
FOR_COMPILE_TIME    ::=  '$for'
BUILTIN_GLOBAL      ::=  '__global'
SEMICOLON_SYNTHETIC ::= '<NL>'
TYPE_               ::= 'type'
DUMP                ::= 'dump'
OFFSETOF            ::= 'offsetof'
SIZEOF              ::= 'sizeof'
ISREFTYPE           ::= 'isreftype'
C_STRING            ::= 'c_string'
raw_string          ::= 'raw_string'
char                ::= 'char'
identifier          ::= 'regexp:[a-zA-Z][a-zA-Z0-9_]*'

// [module <ident>]
// [imports]
//
// [TopLevelDeclarations]
File ::= ShebangClause? ModuleClause? ImportList? TopLevelDeclaration*

// General rule for explicit and implicit ';'
semi ::= '<NL>' | ';' | <<eof>>
list_separator ::= semi | ','

// #!/usr/bin/env v
ShebangClause ::= shebang

// [attr] module <name>
ModuleClause ::= Attributes? module identifier semi

// import <part1>
// import <part1>.<part2>
// import <part1>.<part2> { <import list> }
// import <part1>.<part2> as <alias>
ImportList ::= (ImportDeclaration semi)+

// import <spec>
ImportDeclaration ::= import ImportSpec

// <part1>
// <part1>.<part2>
// <part1> { <ref> }
// <part1> as <alias>
ImportSpec ::= ImportPath ImportAlias? SelectiveImportList?

// <part1>
// <part1>.<part2>
ImportPath ::= ImportName ('.' ImportName)*

// just identifier
ImportName ::= identifier

// { <ref>[, <ref2>] }
SelectiveImportList ::= '{' ReferenceExpression (list_separator ReferenceExpression)* list_separator? '}'

// as <ident>
ImportAlias ::= as ImportAliasName

ImportAliasName ::= identifier
// end of import rule

////////// TOP LEVEL DECLARATIONS //////////

TopLevelDeclaration ::= !<<eof>> TopDeclaration semi // {pin=1 recoverWhile=TopLevelDeclarationRecover}
TopDeclaration ::= ConstDeclaration | StaticMethodDeclaration | MethodDeclaration | FunctionDeclaration | StructDeclaration | EnumDeclaration | InterfaceDeclaration | GlobalVariableDeclaration | CompileTimeForStatement | TypeAliasDeclaration | Statement // for single files without `main()` function

TopLevelDeclarationRecover ::= !('type' | '__global' | enum | import | '$for' | '$if' | '@[' | '[' | '!' | '?' | '&' | '(' | '*' | '+' | '-' | ';' | '<-' | '^' | '{' | '|' | '|=' | '||' | '&&' | '}' | break | case | const | continue | defer | else | float | for | fn | pub | mut | volatile | shared | go | spawn | goto | hex | identifier | if | int | interface | oct | return | select | 'raw_string' | OPEN_QUOTE | char | struct | union | var | unsafe | assert | match | lock | rlock | asm | true | false | none | '$else' | typeof | offsetof | sizeof | isreftype | dump | nil)

////////// TOP LEVEL DECLARATIONS END //////////


////////// STATEMENTS //////////

// Block { }
BlockWithConsume ::= /*<<consumeBlock>> |*/ BlockInner {elementType=Block}
Block ::= BlockInner {methods=[processDeclarations]}
BlockInner ::= '{' ('}' | (<<withOff Statements "BLOCK?" "PAR">> | (!() Statements)) '}') {pin(".*")=1}
BlockNoPin ::= '{' ('}' | (<<withOff Statements "BLOCK?" "PAR">> | (!() Statements)) '}') // {elementType=Block}
// end of block rule

Statements ::= StatementWithSemi*

StatementWithSemi ::= Statement (semi | &'}') // { pin=1 recoverWhile=StatementRecover }
Statement ::= BlockNoPin | AppendStatement | SimpleStatement | ReturnStatement | BreakStatement | ContinueStatement | GotoStatement | ForStatement | CompileTimeForStatement | AssertStatement | AsmBlockStatement | LabeledStatement | DeferStatemen

StatementRecover ::= !('!' | '?' | '&' | '@[' | '[' | '(' | '*' | '+' | '-' | ';' | '<-' | '^' | '{' | '|' | '|=' | '||' | '&&' | '}' | type | break | case | const | continue | defer | else | float | for | fn | pub | mut | volatile | shared | go | spawn | goto | hex | identifier | if | int | interface | oct | return | select | 'raw_string' | OPEN_QUOTE | char | struct | union | var | unsafe | assert | match | lock | rlock | asm | true | false | none | '$for' | '$if' | '$else' | '__global' | typeof | offsetof | sizeof | isreftype | dump | nil)

// attributes start
// @[attr1]
// @[attr2]
Attributes ::= Attribute (semi Attribute)* semi?

// @[<exprs>] or [<exprs>]
Attribute ::= ('@[' AttributeExpressions ']') | ('[' AttributeExpressions ']')

// <expr>[; <expr2>]
AttributeExpressions ::= AttributeExpression (';' AttributeExpression)*
// 'if <ident>' or <plain>
AttributeExpression ::= IfAttribute | PlainAttribute

// if <ident>
IfAttribute ::= if Expression
// <ident> or 10 or "string" [: <ident> or <literal>]
PlainAttribute ::= AttributeKey AttributeValueWithColon?
AttributeKey ::= AttributeIdentifier | Literal

// : <ident> or <literal>
AttributeValueWithColon ::= ':' AttributeValue
AttributeValue ::= identifier | Literal

AttributeIdentifier ::= AttributeIdentifierPrefix? (identifier | unsafe)
AttributeIdentifierPrefix ::= (identifier | unsafe) '.'
// end of attributes

// simple statements
SimpleStatement ::= VarDeclaration | (LeftHandExprList AssignmentStatement? | SendStatement) // {pin(".*")=LeftHandExprList}

// <vars> := <exprs>
VarDeclaration ::= VarDefinitionList ':=' ExpressionList

// <label>: <stmt>
LabeledStatement ::= LabelDefinition Statement?

// <label>:
LabelDefinition ::= identifier ':'

// = <list>
AssignmentStatement ::= AssignOp (ExpressionList)
AssignOp ::= '=' | '+=' | '-=' | '|=' | '^=' | '*=' | '/=' | '%=' | '<<=' | '>>=' | '>>>=' | '&=' | '&^='

// <- <expr>
SendStatement ::= '<-' BeforeBlockExpression
// end of simple statements

// For statement
// for { ... }
// for <expr> { ... }
// for [<statement>] ; [<expr>] ; [<statement>] { ... }
// for [<expr> ,] <expr> in <expr> { ... }
ForStatement ::= for (ForClause | RangeClause | BeforeBlockExpression)? Block

// ะก form of for loop
// [<statement>]; [<expression>]; [<statement>]
ForClause ::= SimpleStatement? ';' Expression? ';' (<<withOn "noBraces" SimpleStatement>>)?

// <var>* in <expression>
RangeClause ::= VarDefinitionList in BeforeBlockExpression

// See ForStatement
CompileTimeForStatement ::= '$for' <<enterMode "BLOCK?">> (ForClause | RangeClause | Expression) Block <<exitModeSafe "BLOCK?">>

// return <expr>
// return <expr>, <expr>
ReturnStatement ::= return ExpressionList?

// break [<label>]
BreakStatement ::= break LabelRef?

// continue [<label>]
ContinueStatement ::= continue LabelRef?

// goto <label>
GotoStatement ::= goto LabelRef

// assert <expr>
AssertStatement ::= assert Expression (',' Expression)?

// defer { ... } rule
DeferStatement ::= defer Block

// <expr> << <expr>
AppendStatement ::= DotExpression ShiftLeftOp Expression

ShiftLeftExpr ::= Expression ShiftLeftOp Expression

ShiftLeftOp ::= <<shiftLeft>>

// <label>:
LabelRef ::= identifier

// select { ... }
SelectExpression ::= select '{' SelectArms '}'
// <stmt> { ... }
// else { ... }
SelectArms ::= (SelectArm | SelectElseArmClause)*
// <stmt> { ... }
SelectArm ::= SelectArmStatement Block semi
SelectArmStatement ::= (<<withOn "noBraces" VarDeclaration>>) | SendStatement | <<withOn "noBraces" LeftHandExprList>> SelectArmAssignmentStatement?

SelectArmAssignmentStatement ::= AssignOp BeforeBlockExpression

// else { ... }
SelectElseArmClause ::= else Block semi

// asm [volatile] { ... }
AsmBlockStatement ::= asm volatile? identifier AsmBlock
AsmBlock ::= '{' ('}' | (ASM_LINE)* '}')

////// DECLARATIONS //////

// struct or union
StructDeclaration ::= Attributes? SymbolVisibility? StructType

AnonymousStructType ::= struct '{' FieldsGroup* '}'

StructType ::= (struct | union) identifier GenericParameters? ImplementsClause? '{'  FieldsGroup* '}'

ImplementsClause ::= implements TypeName (',' TypeName)* LastComma?

LastComma ::= ','

FieldsGroup ::= UnfinishedMemberModifiers | WithModifiersFieldsGroup | WithoutModifiersFieldsGroup

// meta rule to deal with completion for modifiers
UnfinishedMemberModifiers ::= MemberModifier+ !(':' | semi)
MemberModifiers ::= MemberModifier* ':'
MemberModifier ::= mut | pub | '__global'

WithModifiersFieldsGroup ::= MemberModifiers semi? FieldDeclarations
WithoutModifiersFieldsGroup ::= !MemberModifiers FieldDeclarations

FieldDeclarations ::= FieldDeclaration+
FieldDeclaration ::= (PlainFieldDeclaration | EmbeddedDefinition) semi?
PlainFieldDeclaration ::= FieldDefinition Type DefaultFieldValue? Attribute?
DefaultFieldValue ::= '=' Expression
FieldDefinition ::= identifier

EmbeddedDefinition ::= Type

// interface
InterfaceDeclaration ::= Attributes? SymbolVisibility? InterfaceType

InterfaceType ::= interface identifier GenericParameters? '{' MembersGroup* '}'

MembersGroup ::= WithModifiersMembersGroup | WithoutModifiersMemberGroup

WithModifiersMembersGroup ::= MemberModifiers semi? InterfaceMembers
WithoutModifiersMemberGroup ::= !MemberModifiers InterfaceMembers

InterfaceMembers ::= InterfaceMember+
InterfaceMember ::= InterfaceMethodDeclaration | FieldDeclaration | EmbeddedInterfaceDefinition

InterfaceMethodDeclaration ::= InterfaceMethodDefinition Attribute? DefaultFieldValue? semi
InterfaceMethodDefinition ::= identifier GenericParameters? Signature

EmbeddedInterfaceDefinition ::= Type


// enum
EnumDeclaration ::= Attributes? SymbolVisibility? EnumType

EnumType ::= enum identifier EnumBackedTypeAs? '{' EnumFields? '}'

EnumBackedTypeAs ::= as Type

EnumFields ::= EnumFieldDeclaration (EnumFieldDeclaration)*
EnumFieldDeclaration ::= EnumFieldDefinition ('=' Expression)? semi?
EnumFieldDefinition ::= <<remapToIdentifier>> identifier

// TODO: split for type alias and sum type?
// [<visibility>] type <ident> = <types>
TypeAliasDeclaration ::= Attributes? SymbolVisibility? 'type' AliasType

AliasType ::= identifier GenericParameters? '=' TypeUnionList

// <type> [ | <type2>]...
TypeUnionList ::= Type (semi? '|' Type)*


// const declarations
// [<visibility>] const <name> = <value>
// [<visibility>] const (<list>)
ConstDeclaration ::= Attributes? SymbolVisibility? const ( ConstDefinition | '(' ConstDefinitions? ')' )
// <spec> [<spec2>]
ConstDefinitions ::= ConstDefinition (semi ConstDefinition)* semi?
// <list> = <list>
ConstDefinition ::= identifier '=' (<<withOff Expression "BLOCK?">> | (!() Expression))
// end of const


// global variable declarations
// <[attrs]> __global <ident> = <expr>
// <[attrs]> __global (<list>)
GlobalVariableDeclaration ::= Attributes? '__global' ( GlobalVariableDefinition | '(' GlobalVariableDefinitions? ')' )
// <spec> [<spec2>]
GlobalVariableDefinitions ::= GlobalVariableDefinition (semi GlobalVariableDefinition)* semi?
// <def> = <expr>
// <def> <type>
GlobalVariableDefinition ::= identifier (VarModifiers Type | GlobalVariableValue)

GlobalVariableValue ::= '=' (<<withOff Expression "BLOCK?">> | (!() Expression))

VarModifiers ::= VarModifier*
VarModifier ::= mut | shared | volatile | static

SymbolVisibility ::= pub | '__global'

GenericParameters ::= GenericParametersOld | GenericParametersNew
GenericParametersOld ::= '<' GenericParameterList? '>'
GenericParametersNew ::= '[' GenericParameterList? ']'

GenericParameterList ::= GenericParameter (',' GenericParameter)* ','?
GenericParameter ::= identifier

GenericArguments ::= GenericArgumentsOld | GenericArgumentsNew
GenericArgumentsOld ::= '<' TypeListNoPin? '>'
GenericArgumentsNew ::= <<leftBracket>> TypeListNoPin? ']'

fnDecl ::= Attributes? SymbolVisibility? fn

FunctionDeclaration ::= fnDecl identifier GenericParameters? Signature BlockWithConsume?

StaticMethodDeclaration ::= fnDecl TypeReferenceExpression '.' identifier GenericParameters? Signature BlockWithConsume?

// <ident> or <ops> for overload
MethodName ::= identifier | AddOp | MulOp | RelOp

// [<modifiers>] <ident> <type>
Receiver ::= VarModifiers? identifier Type ','?

////// DECLARATIONS END //////


////////// STATEMENTS END //////////


////////// EXPRESSIONS //////////

Expression ::= OrExpr | AndExpr | ConditionalExpr | RangeExpr | AddExpr | ShiftLeftExpr | MulExpr | UnaryExpr | SendExpr | MatchExpression | SelectExpression | CompileTimeIfExpression | InExpression | NotInExpression | IsExpression | NotIsExpression | AsExpression | MaxGroup | EnumFetch | MutExpression | SharedExpression | GoExpression | SpawnExpression | LockExpression | IncDecExpression | UnpackingExpression | TypeCastExpression | ParenthesesExpr
// end of expression rule

TypeCastExpression ::= Type '(' Expression ')'

// (r)lock <var> { ... }
// (r)lock <var>; (r)lock <var2> { ... }
LockExpression ::= LockParts+ Block
LockParts ::= (lock | rlock) BeforeBlockExpressionList? ';'?

// go <expr>
GoExpression ::= go Expression
// spawn <expr>
SpawnExpression ::= spawn Expression

// { ... }
MapInitExpr ::= <<prevIsNotType>> <<braceRuleMarker>> '{' <<enterMode "MAP_KEY_VALUE">> KeyValues? <<exitMode "MAP_KEY_VALUE">> '}'
KeyValues ::= KeyValue ((semi | ',') KeyValue)* (semi | ',')?
// <key> : <value>
KeyValue ::= Expression ':' Expression

// struct {...}
AnonymousStructValueExpression ::= struct '{' ElementList? '}'
// <type> {...}
LiteralValueExpression ::= <<braceRuleMarker>> Type <<prevIsNotFunType>> GenericArguments? '{' ElementList? '}'
ElementList ::= ElementInner ((',' | semi) ElementInner?)*
ElementInner ::= Element | (!() Element) // {recoverWhile=ElementInnerRecover}
//ElementInnerRecover ::= !('}' | ',' | semi | ')')
Element ::= First [':' Value]
First ::= Key | <<keyOrValueExpression>>
Key ::= (FieldName &':') | !() Expression // nullability hack for key without reference inside
FieldName ::= ReferenceExpression
Value ::= Expression

// end of type init

MaxGroup ::=  DotExpression | Literal | FunctionLit

// fn [[<captures>]] [<generics>] (...) {...}
FunctionLit ::= fn CaptureList? GenericParameters? Signature Block
// [<var1>, <var2>, ...]
CaptureList ::= '[' (Capture | ',' Capture)* ']'
// [mut] <ident>
Capture ::= VarModifiers? ReferenceExpression

////// TYPES //////

// TODO: make as SharedType?
TypeModifiers ::= TypeModifier*
TypeModifier ::= mut | volatile | static

Type ::= TypeModifiers? (TypeLit | TypeName) GenericArguments?
//  | ParType {
//  stubClass="io.vlang.lang.stubs.GoTypeStub"
//  methods=[getUnderlyingType shouldGoDeeper]
//  }
//ParType ::= '(' Type ')' {methods=[getActualType]}

TypeName ::= TypeReferenceExpression QualifiedTypeReferenceExpression*

QualifiedTypeReferenceExpression ::= '.' <<remapToIdentifier>> identifier

TypeReferenceExpression ::= identifier

TypeLit ::= MapType | ArrayType | FixedSizeArrayType | TupleType | SharedType | NoneType | PointerType | WrongPointerType | OptionType | ResultType | FunctionType | ChannelType | ThreadType | AtomicType | AnonymousStructType | StructType | InterfaceType // inline interface ???

// [<expr>]<type>
ArrayType ::= '['']' Type
FixedSizeArrayType ::= '[' Expression ']' Type

// (<type>, <type>, ...)
TupleType ::= '(' TypeListNoPin ')'

// shared <type>
SharedType ::= shared Type

// none
NoneType ::= none

// &<type>
// &&<type>
// &&&<type>
PointerType ::= ('&' | '&&')+ Type

// In languages like Go, pointers use an asterisk, not an ampersand,
// so this rule is needed to properly parse and then give an error to the user.
WrongPointerType ::= '*'+ Type

// !<type>
// bare !
ResultType ::= '!' Type?
// ?<type>
// bare ?
OptionType ::= '?' Type?
// fn (...) <type>
// fn (...) (<type1>, <type2>, ...)
FunctionType ::= fn GenericParameters? Signature

// signature
// (...) ...
Signature ::= Parameters Result?
Result ::= Type
Parameters ::= '(' ParameterList? ','? ')'

ParameterList ::= ParamDefinition (',' (ParamDefinition | &')'))* list_separator?

ParamDefinition ::= ParamWithName | ParamWithoutName
ParamWithName ::= VarModifiers? identifier '...'? Type
ParamWithoutName ::= VarModifiers? '...'? Type

TypeListNoPin ::= Type (',' Type)* ','?
// end of signature

// map[<type>]<type>
MapType ::= 'map' '[' Type ']' Type

// chan <type>
ChannelType ::= 'chan' Type?

// thread <type>
ThreadType ::= 'thread' Type?

// atomic <type>
AtomicType ::= atomic Type?

////// TYPES END //////

LeftHandExprList ::= ExpressionList

ExpressionList ::= ExpressionWithRecover (',' (ExpressionWithRecover | &')'))*
ExpressionWithRecover ::= Expression !':' {recoverWhile=ExpressionListRecover}
ExpressionListRecover ::= !('!' | '?' | '!=' | '%' | '%=' | '&&' | '&' | '&=' | '&^' | '&^=' | '(' | ')' | '*' | '*=' | '+'  | '++' | '+=' | ',' | '-' | '--' | '-=' | '...' | '/' | '/=' | ':' | ';' | '<' | '<-' | '<<' | '<<=' | '<=' | '<NL>' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '>>>=' | '@[' | '[' | ']' | '^' | '^=' | '{' | '|' | '|=' | '||' | '}' | 'type' | break | case | const | continue | defer | else | float | for | fn | go | spawn | goto | hex | identifier | if | int | interface | oct | return | select | 'raw_string' | OPEN_QUOTE | char | struct | enum | union | var | unsafe | assert | match | asm | true | false | none | nil | typeof | offsetof | sizeof | isreftype | dump )

VarDefinitionList ::= VarDefinition (',' VarDefinition)*
VarDefinition ::= VarModifiers? identifier

// <ident>[.<ident>]*
DotExpression ::= DotPrimaryExpr RightHandExprs

DotPrimaryExpr ::= AnonymousStructValueExpression | LiteralValueExpression | BuiltinCall | IfExpression | ReferenceExpression | Literal | FunctionLit | ArrayCreation | ParenthesesExpr | UnsafeExpression | MapInitExpr

BuiltinCall ::= OffsetOfCallExpr | TypeOfCallExpr | SizeOfCallExpr | IsRefTypeCallExpr | DumpCallExpr

IsRefTypeCallExpr ::= isreftype GenericArguments? '('  Expression? ')'
SizeOfCallExpr ::= sizeof GenericArguments? '('  Expression? ')'
TypeOfCallExpr ::= typeof GenericArguments? '(' Expression? ')'
OffsetOfCallExpr ::= offsetof '(' Type ',' ReferenceExpression ')'
DumpCallExpr ::= dump '(' Expression ')'

// just <ident> with reference
ReferenceExpression ::= identifier
QualifiedReferenceExpression ::= semi? '.' identifier <<checkNoColonIfMap>>
SafeQualifiedReferenceExpression ::= semi? '?.' identifier

RightHandExprs ::= RightHandExpr*

RightHandExpr ::= CompileTimeFieldReference | (<<callExprWithPropagate>> | (!() CallExprWithPropagate)) | (<<callExpr>> | (!() CallExpr)) | IndexOrSliceExpr | SafeQualifiedReferenceExpression | QualifiedReferenceExpression | OrBlockExpr | OptionPropagationExpression | ResultPropagationExpression

// <expr>[<<generics>>](...)
CallExpr ::= GenericArguments? ArgumentList

// <expr>[<<generics>>](...)
CallExprWithPropagate ::= GenericArguments? ArgumentList ('!' | '?')

// .$(<dot_expr>)
CompileTimeFieldReference ::= '.' '$' '(' DotExpression ')'

// noinspection BnfUnusedRule
// used in <<callExpr>>
JsonCallExpr ::= JsonArgumentList

JsonArgumentList ::= '(' <<enterMode "PAR">> Type ','? ElementList? '...'? ','? <<exitModeSafe "PAR">> ')'

// <expr>[<expr>]
// <expr>#[<expr>]
// <expr>[0..10]
// <expr>[..10]
// <expr>[0..]
// <expr>[..]
IndexOrSliceExpr ::= ('[' | '#[') IndexOrSliceInner ']' !identifier
IndexOrSliceInner ::= EmptySlice | ((SliceExprBody | IndexExprBody) '..'?)
EmptySlice ::= '..' &']'
IndexExprBody ::= Expression SliceExprBody?
SliceExprBody ::= '..' Expression

// <expr> or { ... }
OrBlockExpr ::= or Block

// math and logical expressions
OrExpr ::= Expression semi? '||' Expression
AndExpr ::= Expression semi? '&&' Expression
SendExpr ::= Expression '<-' Expression
UnaryExpr ::=  UnaryOp Expression
ConditionalExpr ::= Expression RelOp Expression
AddExpr ::= Expression AddOp Expression
MulExpr ::= Expression MulOp Expression

RelOp ::= '==' | '!=' | '<' | '<=' | '>' !'>' | '>='
AddOp ::= '+' | '-' | '|' | '^'
MulOp ::= '*' | '/' | '%' | <<gtGtGt>> | <<gtGt>> | '&' | '&^'
UnaryOp ::= '+' | '-' | '!' | '^' | '~' | '*' | '&' | '&&' | '<-'


BinaryExpr ::= Expression+
// end of math and logical expressions

ParenthesesExpr ::= '(' <<enterMode "PAR">> Expression <<exitModeSafe "PAR">>')'

// <expr>++/--
IncDecExpression ::= Expression ('++' | '--')

// <expr>?
OptionPropagationExpression ::= '?'

// <expr>!
ResultPropagationExpression ::= '!'

// ...<expr>
UnpackingExpression ::= '...' Expression

// .<ident>
EnumFetch ::= '.' <<remapToIdentifier>> identifier

// <expr>..<expr>
// <expr>...<expr> (inclusive)
RangeExpr ::= Expression ('..' | '...') !']' Expression

// mut <expr>
MutExpression ::= mut Expression

// shared <expr>
SharedExpression ::= shared Expression

// [<list>]
// [<list>]! โ fixed size array
ArrayCreation ::= '[' <<enterMode "PAR">> ArrayCreationList? semi? (<<exitModeSafe "PAR">> ']' '!'?) !identifier
// <expr1>, <expr2>, ..., <exprN>
ArrayCreationList ::= ExpressionWithRecover (list_separator? ExpressionWithRecover)* list_separator?

// ([<arg1>, <arg2>[...], ...])
ArgumentList ::= '(' <<enterMode "PAR">> ElementList? '...'? ','? <<exitModeSafe "PAR">> ')'

BeforeBlockExpressionInner ::= beforeBlockExpression;
BeforeBlockExpression ::= BeforeBlockExpressionInner | !() Expression;
BeforeBlockExpressionList ::= BeforeBlockExpression (',' (BeforeBlockExpression | &')'))*

// match <expr> { ... }
MatchExpression ::= match BeforeBlockExpression '{' MatchArms '}'
// <expr>[, <expr2>] { ... }
// else { ... }
MatchArms ::= (MatchArm | MatchElseArmClause)*
// <expr>[, <expr2>] { ... }
MatchArm ::= MatchExpressionList Block semi
// <expr>[, <expr2>]
MatchExpressionList ::= MatchArmExpression (',' MatchArmExpression)*
// <expr> or <type>
MatchArmExpression ::= <<typeOrExpression>>
// else { ... }
MatchElseArmClause ::= else Block semi

// <expr> in <expr>
InExpression ::= Expression in Expression
// <expr> !in <expr>
NotInExpression ::= Expression '!in' Expression

// <expr> is <expr>
IsExpression ::= Expression is Type
// <expr> !is <expr>
NotIsExpression ::= Expression '!is' Type

// <expr> as <expr>
AsExpression ::= Expression as Type

// unsafe { ... }
UnsafeExpression ::= unsafe Block

// if <condition> { ... }
IfExpression ::= if Condition semi? Block (semi? ElseBranch)?

// else { ... }
// else if { ... }
ElseBranch ::= else (IfExpression | Block)

// $if <condition> { ... }
CompileTimeIfExpression ::= '$if' Condition semi? Block (semi? CompileTimeElseBranch)?

// $else { ... }
// $else $if { ... }
CompileTimeElseBranch ::= '$else' (CompileTimeIfExpression | Block)

Condition ::= GuardVarDeclaration | BeforeBlockExpression
GuardVarDeclaration ::= VarDefinitionList ':=' BeforeBlockExpression

////////// EXPRESSIONS END //////////


////// LITERALS //////

// literals like 0 or 10.5 and other
Literal ::= int | float | hex | oct | bin | true | false | StringLiteral | char | none | nil

// just different strings
StringLiterl ::= 'raw_string' | StringTemplate

StringTemplate ::= OPEN_QUOTE StringTemplatePart* CLOSING_QUOTE

StringTemplatePart ::= LITERAL_STRING_TEMPLATE_ENTRY | LITERAL_STRING_TEMPLATE_ESCAPE_ENTRY | LongStringTemplateEntry | ShortStringTemplateEntry | StringTemplateEntry | SHORT_TEMPLATE_ENTRY_START

LongStringTemplateEntry ::= LONG_TEMPLATE_ENTRY_START Expression semi? FormatSpecifier? TEMPLATE_ENTRY_END
StringTemplateEntry ::= TEMPLATE_ENTRY_START Expression FormatSpecifier? TEMPLATE_ENTRY_END

FormatSpecifier ::= ':' FormatSpecifierExpression
FormatSpecifierExpression ::= (FormatSpecifierLeftAlignFlag | FormatSpecifierRightAlignFlag)? FormatSpecifierWidthAndPrecision? FormatSpecifierLetter?
FormatSpecifierLeftAlignFlag ::= '-'
FormatSpecifierRightAlignFlag ::= '+'
FormatSpecifierWidthAndPrecision ::= int | float
FormatSpecifierLetter ::= identifier

ShortStringTemplateEntry ::= SHORT_TEMPLATE_ENTRY_START Expression

////// LITERALS END //////
