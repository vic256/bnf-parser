// VarDeclaration ::= VarDefinitionList ':=' ExpressionList
// VarDefinitionList ::= VarDefinition (',' VarDefinition)*
//VarDefinition ::= VarModifiers? identifier
//VarModifiers ::= VarModifier*
VarModifier ::= 'mut' | 'shared' | 'volatile' | 'static'
VarTest ::= 'hello' 'world'
//ExpressionList ::= ExpressionWithRecover (',' (ExpressionWithRecover | &')'))*
// Expressionlist ::= ExpressionWithRecover
// ExpressionWithRecover ::= Expression !':' 
//{recoverWhile=ExpressionListRecover}
// ExpressionListRecover ::= !('!' | '?' | '!=' | '%' | '%=' | '&&' | '&' | '&=' | '&^' | '&^=' | '(' | ')' | '*' | '*=' | '+'  | '++' | '+=' | ',' | '-' | '--' | '-=' | '...' | '/' | '/=' | ':' | ';' | '<' | '<-' | '<<' | '<<=' | '<=' | '<NL>' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '>>>=' | '@[' | '[' | ']' | '^' | '^=' | '{' | '|' | '|=' | '||' | '}' | 'type' | break | case | const | continue | defer | else | float | for | fn | go | spawn | goto | hex | identifier | if | int | interface | oct | return | select | 'raw_string' | OPEN_QUOTE | char | struct | enum | union | var | unsafe | assert | match | asm | true | false | none | nil | typeof | offsetof | sizeof | isreftype | dump )
// Expression ::= AddExpr
// AddExpr ::= Expression AddOp Expression
//AddOp ::= '+' | '-' | '|' | '^'
//identifier          ::= 'regexp:[a-zA-Z][a-zA-Z0-9_]*'

// | ou (plusieurs)
// * 0 ou + 
// A B les deux
// ? A ou rien